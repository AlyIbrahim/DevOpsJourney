 pipeline {
    // agent { node { label 'nodejs' } }
    agent any

    environment {
        WEB_INSTANCE_IP = "ADD_YOUR_WEB_INSTANCE_IP"
        ANSIBLE_CREDENTIALS_ID = "ADD_YOUR_CREDENTIALS_ID"
        BUCKET_NAME = "ENTER_YOUR_BUCKET_NAME/"
        PREFIX = "build/"
    }

    stages {
        stage('Checkout'){
            steps{
                echo "Cloning .."
                git url: "https://github.com/AlyIbrahim/DigitalCloudDevOps", branch: "main"
            }
        }
        
        stage('Build') {
            steps {
                echo 'Building..'
                dir('simple-node'){
                sh "pwd"
                sh "npm install"
            }
            }
        }
        stage('Test') {
            steps {
                echo 'Testing..'
            }
        }
        stage('Package') {
            steps {
                sh "rm -rf app.zip"
                dir('simple-node'){
                    sh "zip -r ../app.zip ."
                }
                sh "ls"
                
            }
        }
        stage('Upload') {
            steps {
                ansibleAdhoc credentialsId: "${ANSIBLE_CREDENTIALS_ID}", inventoryContent: "[web]\n${WEB_INSTANCE_IP} ansibel_user=ansible\n", hosts: 'web', module: 'file', moduleArguments: 'path=/home/ansible/build/ state=directory'
                ansibleAdhoc credentialsId: "${ANSIBLE_CREDENTIALS_ID}", inventoryContent: "[web]\n${WEB_INSTANCE_IP} ansibel_user=ansible\n", hosts: 'web', module: 'copy', moduleArguments: 'src=app.zip dest=/home/ansible/build/app.zip'
            }
        }
         stage('Upload to S3') {
            steps {
                script {
                    // s3Upload(bucket: 'e', file: '*')
                    s3Upload consoleLogLevel: 'INFO', dontSetBuildResultOnFailure: false, dontWaitForConcurrentBuildCompletion: false, entries: [[bucket: "${BUCKET_NAME}/${PREFIX}", excludedFile: '', flatten: false, gzipFiles: true, keepForever: false, managedArtifacts: false, noUploadOnFailure: false, selectedRegion: 'us-west-2', showDirectlyInBrowser: false, sourceFile: '*', storageClass: 'STANDARD', uploadFromSlave: false, useServerSideEncryption: false]], pluginFailureResultConstraint: 'FAILURE', profileName: 's3fromec2', userMetadata: []
                }
            }
        }                
        stage('Deploy App with Ansible') {
            steps {
                ansiblePlaybook become: false, becomeUser: 'ansible', credentialsId: "${ANSIBLE_CREDENTIALS_ID}", inventoryContent: "[web]\n${WEB_INSTANCE_IP} ansibel_user=ansible\n", limit: 'web', playbook: 'ansible-playbooks/deploy-playbook.yaml', vaultTmpPath: ''
            }
        }
    }

}

